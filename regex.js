// 正则表达式 ： 要么匹配字符 要么匹配位置
// Base =========== 字符匹配 ===========
/**
 * 两种模糊匹配
 * 1、横向模糊和纵向模糊
 * 横向模糊：一个正则可匹配的字符串长度不是固定的 例如-> regex = /ab{2,5}c/g
 * 纵向模糊：一个正则匹配字符串，具体到某一个字符时，它可以不是某一个确定的字符 例如：/a[123]b/ => 可以是 a1b a2b a3b
 */

var regex1 = /ab{2,5}c/g
var string1 = 'abc abbc abbbc abbbbc abbbbbbbc'
console.log(string1.match(regex1)) // ["abbc", "abbbc", "abbbbc"]

/**
 * 2 字符组
 * 表示范围 使用 - 进行  简写时，连接范围，而要匹配 - 时， 将 - 放在开头或者结尾 或 进行转义
 * [ab-] or [-ab] or [a\-b]
 */
var regex2 = /[1-6a-zG-M]/

/**
 * 排除字符组
 * 就是反字符组  不能为 xxx 例如： [^abc] 表示不可是abc
 */
var regex3 = /[^abcd]/

/**
 * 常见的字符组 
 * \d 表示 [0-9]
 * \D 表示 [^0-9]
 * \w 表示 [0-9a-zA-Z_] 单词字符
 * \W 表示 [^0-9a-zA-Z_] 非单词字符
 * \s 表示 [ \t\v\n\r\f] 空白符 水平指标符 垂直制表符 换行符 回车符 换页符
 * \S 表示 [^ \t\v\n\r\f] 非空白符
 * . 表示 [^\n\r\u2028\u2029] 通配符 表示几乎任意字符
 */
// 如果要匹配任意字符该怎么办 可以使用 [\d\D]、[\w\W]、[\s\S]、[^] 中的任意一个

/**
 * 3. 量词
 * 量词：
 *  {m,}  至少出现 m次
 *  {m} = {m,m} 出现 m 次
 *  ? = {0, 1} 表示 出现或者不出现
 *  + = {1, } 表示 至少出现一次
 *  * = {0, } 表示出现任意次 也可能不出现 
 */

// 贪婪匹配和惰性匹配
var regex4 = /\d{2,5}/g; // 尽可能的多去匹配 ** 贪婪 **
var string2 = '123 1234 12345 123456';
console.log(string2.match(regex4)) // => ['123', '1234', '12345'] 

var regex5 = /\d{2,5}?/g; // 当两个能满足时 就不会再继续尝试了 ** 惰性 ** 
var string5 = '123 1234 12345 123456';
console.log(string5.match(regex5)) // => ['12', '12', '34', '12', '34', '12', '34', '56']

// 在量词后面加一个 ? 问号 就能实现惰性匹配
/**
 *  惰性           贪婪
 *  {m,n}?         {m,n}
 *  {m,}?          {m,}
 *  ??             ?
 *  +?             +
 *  *?             *
 */
